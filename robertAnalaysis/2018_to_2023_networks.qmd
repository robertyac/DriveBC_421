---
title: "Drive BC Network Analysis"
author:
  - name: "Robert Yacovelli"
format:
  html:
    toc: true
    embed-resources: true
    df-print: paged
editor: visual
---

# Data Loading and Initial Cleaning

```{r}
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(readr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidytext))
```

```{r cache=TRUE}
data_files <- list.files(path = "../data/", 
                        pattern = "drivebceventshist.*\\.csv",
                        full.names = TRUE)

data_files <- data_files[grep("(2018|2019|2020|2021|2022|2023)", data_files)]

# Define column types
col_types <- cols(
  EVENT_TYPE = col_character(),
  EVENT_SUBTYPE = col_character(),
  SEVERITY = col_character(),
  CREATED = col_character(), 
  AREA_NAME = col_character(),
  HEAD_LATITUDE = col_double(),
  HEAD_LONGITUDE = col_double(),
  ROAD_NAME = col_character()
)

# Read and combine with consistent types
road_data <- bind_rows(
  lapply(data_files, function(file) {
    read_csv(file, col_types = col_types) %>%
      select(
        EVENT_TYPE, 
        EVENT_SUBTYPE, 
        SEVERITY, 
        CREATED, 
        AREA_NAME, 
        HEAD_LATITUDE, 
        HEAD_LONGITUDE, 
        ROAD_NAME
      ) %>%
  mutate(CREATED = as.POSIXct(CREATED))
  })
)
```

```{r}
head(road_data)
nrow(road_data)
```

# Bipartite network for incidents and time factors

```{r cache=TRUE}
#| label: fig-graph1
#| fig-width: 13
#| fig-height: 10

create_incident_time_network <- function(data_sample) {
  incident_time_edges <- data_sample %>%
    mutate(
      hour_created = hour(as.POSIXct(CREATED)),
      time_of_day = case_when(
        hour_created >= 6 & hour_created < 12 ~ "Morning",
        hour_created >= 12 & hour_created < 18 ~ "Afternoon",
        hour_created >= 18 & hour_created < 24 ~ "Evening",
        hour_created >= 0 & hour_created < 6 ~ "Night"
      ),
      day_of_week = weekdays(CREATED),
      season = case_when(
        month(CREATED) %in% c(12, 1, 2) ~ "Winter",
        month(CREATED) %in% c(3, 4, 5) ~ "Spring",
        month(CREATED) %in% c(6, 7, 8) ~ "Summer",
        TRUE ~ "Fall"
      )
    ) %>%
    select(EVENT_TYPE, SEVERITY, AREA_NAME, time_of_day, day_of_week, season) %>%
    pivot_longer(cols = c(time_of_day, day_of_week, season), names_to = "time_factor", values_to = "time_value") %>%
    select(EVENT_TYPE, time_value)
    
  # Rest of the function remains the same
  incident_time_nodes <- data.frame(
    name = unique(c(incident_time_edges$EVENT_TYPE, incident_time_edges$time_value)),
    type = c(rep(TRUE, length(unique(incident_time_edges$EVENT_TYPE))), 
             rep(FALSE, length(unique(incident_time_edges$time_value))))
  )
  
  incident_time_graph <- graph_from_data_frame(d = incident_time_edges, 
                                             vertices = incident_time_nodes, 
                                             directed = FALSE)
  return(incident_time_graph)
}

# Stratified sampling
set.seed(123) # For reproducibility
road_data_sample <- road_data %>%
  group_by(EVENT_TYPE) %>%
  sample_frac(0.001) %>% # .001 is about 1000 sample size for our data
  ungroup()

incident_time_network <- create_incident_time_network(road_data_sample)

# Determine the layout
layout <- layout_as_bipartite(incident_time_network)

plot(
  incident_time_network, 
  layout = layout, 
  vertex.label.cex = 0.6, 
  vertex.size = 5,
  vertex.label.dist = 1.5
)
```

The `sample_frac` function is used to take a stratified sample from the `road_data` dataframe, ensuring that each EVENT_TYPE is proportionally represented.

```{r}
in_degrees <- degree(incident_time_network, mode = "in")

degree_data <- data.frame(
  node = V(incident_time_network)$name,
  in_degree = in_degrees
)

# Filter to include only time values
time_values <- degree_data %>%
  filter(grepl("^[A-Z][a-z]", node))

time_values <- time_values %>%
  arrange(desc(in_degree))

ggplot(time_values, aes(x = reorder(node, in_degree), y = in_degree)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(title = "All Event occurrences time distribution", x = "Node", y = "In-Degree") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  coord_flip() 
```

# Create a plot for each event type, using the entire dataset 2018-2023

```{r}
#| label: fig-graph2
#| fig-width: 13
#| fig-height: 10
event_types <- unique(road_data$EVENT_TYPE)
years <- 2018:2023

# Combined data frame for all event types and years
combined_data <- do.call(rbind, lapply(event_types, function(event_type) {
  do.call(rbind, lapply(years, function(year) {
    event_data <- road_data %>%
      filter(EVENT_TYPE == event_type, year(CREATED) == year)
    
    event_network <- create_incident_time_network(event_data)
    
    event_degree_data <- data.frame(
      node = V(event_network)$name,
      in_degree = degree(event_network, mode = "in"),
      event_type = event_type,
      year = year
    )
    
    event_degree_data %>%
      filter(grepl("^[A-Z][a-z]", node))
  }))
}))

combined_data <- combined_data %>%
  group_by(event_type, node) %>%
  mutate(node_total = sum(in_degree)) %>%
  ungroup() %>%
  group_by(event_type) %>%
  mutate(total_degree = sum(in_degree)) %>%
  ungroup()

ggplot(combined_data, 
       aes(x = reorder_within(node, desc(node_total), event_type),
           y = in_degree, 
           fill = factor(year))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "In-Degree Distribution by Event Type and Year", 
       x = "Node", 
       y = "In-Degree", 
       fill = "Year") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  facet_wrap(~ reorder(event_type, desc(total_degree)), 
             scales = "free_x",
             nrow = 2,
             ncol = 3) +
  scale_x_reordered()
```